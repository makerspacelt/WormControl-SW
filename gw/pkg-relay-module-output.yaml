sensor:
  - platform: template
    id: "RL${rl_address}_${out}"
    # restore_value: true # TODO maybe global or number instead of sensor
    update_interval: 5s # interval at which to execute the lambda
    lambda: |-
      std::vector<uint8_t> data(2);
      data[0] = 0b00000000;
      data[1] = 0b00000000;
      if (id(RL${rl_address}_0).state)  data[0] |= 1 << 0;
      if (id(RL${rl_address}_1).state)  data[0] |= 1 << 1;
      if (id(RL${rl_address}_2).state)  data[0] |= 1 << 2;
      if (id(RL${rl_address}_3).state)  data[0] |= 1 << 3;
      if (id(RL${rl_address}_4).state)  data[0] |= 1 << 4;
      if (id(RL${rl_address}_5).state)  data[0] |= 1 << 5;
      if (id(RL${rl_address}_6).state)  data[0] |= 1 << 6;
      if (id(RL${rl_address}_7).state)  data[0] |= 1 << 7;
      if (id(RL${rl_address}_8).state)  data[1] |= 1 << 0;
      if (id(RL${rl_address}_9).state)  data[1] |= 1 << 1;
      if (id(RL${rl_address}_10).state) data[1] |= 1 << 2;
      if (id(RL${rl_address}_11).state) data[1] |= 1 << 3;
      if (id(RL${rl_address}_12).state) data[1] |= 1 << 4;
      if (id(RL${rl_address}_13).state) data[1] |= 1 << 5;
      if (id(RL${rl_address}_14).state) data[1] |= 1 << 6;
      if (id(RL${rl_address}_15).state) data[1] |= 1 << 7;
      id(espcan).send_data(0b10100000${rl_address}, false, data);
      return {};

  - platform: mqtt_subscribe
    id: "RL${rl_address}_${out}_mqtt_sub"
    topic: "${root_topic}/relay/${rl_address}/out/${out}/set"
    on_value:
      - lambda: |-
          id(RL${rl_address}_${out}).publish_state(x);
