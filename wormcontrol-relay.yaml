substitutions:
  device_name: wormcontrol-relay
  update_interval_debug: 5s

packages:
  base: !include mod-relay/pkg-base.yaml

i2c:
  sda: GPIO2
  scl: GPIO8
  frequency: 100kHz
  scan: true

sn74hc595:
  - id: "rl_hub"
    data_pin: GPIO6
    clock_pin: GPIO7
    latch_pin: GPIO10
    sr_count: 2

globals:
  - id: g_can_addr
    type: int
    initial_value: "-1"

  - id: g_relay_states
    type: int[2]

script:
  - id: s_read_my_addr
    then:
      - lambda: |-
          int dip1 = id(can_dip1).state;
          int dip2 = id(can_dip2).state;
          int dip3 = id(can_dip3).state;
          int dip4 = id(can_dip4).state;
          int old_can_addr = id(g_can_addr);
          int new_can_addr = (dip1 << 3) | (dip2 << 2) | (dip3 << 1) | dip4;
          if (old_can_addr != new_can_addr) {
            id(g_can_addr) = new_can_addr;
            
            ESP_LOGI("s_read_my_addr", "relay address change: %s -> %s",
              old_can_addr < 0 ? "n/a" : std::bitset<4>(old_can_addr).to_string().c_str(),
              std::bitset<4>(new_can_addr).to_string().c_str(),
              old_can_addr
            );
            id(s_send_relay_states).execute(); // force publish of new address on change
          }

  - id: s_send_relay_states
    then:
      - lambda: |-
          if (id(g_can_addr) < 0) {
            ESP_LOGI("s_send_relay_states", "g_can_addr not ready yet");
            return;
          }
          std::vector<uint8_t> data(2);
          data[0] = id(g_relay_states)[0];
          data[1] = id(g_relay_states)[1];
          // TODO maybe change the first bit to 1 when sending this msg on boot to increase priority (see spec-canbus.md)
          uint32_t addr = 0b00010010000 | id(g_can_addr);
          id(espcan).send_data(addr, false, data);

switch:
  # relays through expander
  - { platform: gpio, id: "RL00", pin: { sn74hc595: rl_hub, number: 0 } }
  - { platform: gpio, id: "RL01", pin: { sn74hc595: rl_hub, number: 1 } }
  - { platform: gpio, id: "RL02", pin: { sn74hc595: rl_hub, number: 2 } }
  - { platform: gpio, id: "RL03", pin: { sn74hc595: rl_hub, number: 3 } }
  - { platform: gpio, id: "RL04", pin: { sn74hc595: rl_hub, number: 4 } }
  - { platform: gpio, id: "RL05", pin: { sn74hc595: rl_hub, number: 5 } }
  - { platform: gpio, id: "RL06", pin: { sn74hc595: rl_hub, number: 6 } }
  - { platform: gpio, id: "RL07", pin: { sn74hc595: rl_hub, number: 7 } }
  - { platform: gpio, id: "RL08", pin: { sn74hc595: rl_hub, number: 8 } }
  - { platform: gpio, id: "RL09", pin: { sn74hc595: rl_hub, number: 9 } }
  - { platform: gpio, id: "RL10", pin: { sn74hc595: rl_hub, number: 10 } }
  - { platform: gpio, id: "RL11", pin: { sn74hc595: rl_hub, number: 11 } }
  - { platform: gpio, id: "RL12", pin: { sn74hc595: rl_hub, number: 12 } }
  - { platform: gpio, id: "RL13", pin: { sn74hc595: rl_hub, number: 13 } }
  - { platform: gpio, id: "RL14", pin: { sn74hc595: rl_hub, number: 14 } }
  - { platform: gpio, id: "RL15", pin: { sn74hc595: rl_hub, number: 15 } }

binary_sensor:
  # canbus address dip switches
  - platform: gpio
    id: can_dip1
    pin: { number: GPIO5, inverted: true, mode: { input: true, pullup: true } }
    filters: { delayed_on_off: 1s }
  - platform: gpio
    id: can_dip2
    pin: { number: GPIO4, inverted: true, mode: { input: true, pullup: true } }
    filters: { delayed_on_off: 1s }
  - platform: gpio
    id: can_dip3
    pin: { number: GPIO3, inverted: true, mode: { input: true, pullup: true } }
    filters: { delayed_on_off: 1s }
  - platform: gpio
    id: can_dip4
    pin: { number: GPIO1, inverted: true, mode: { input: true, pullup: true } }
    filters: { delayed_on_off: 1s }

canbus:
  - platform: esp32_can
    id: espcan
    tx_pin: GPIO21
    rx_pin: GPIO20
    can_id: 0
    bit_rate: 125kbps
    on_frame:
      # relay control message from gw
      - can_id: 0b10000000000
        can_id_mask: 0b11111110000
        then:
          - lambda: |-
              if ((can_id & 0b00000001111) == id(g_can_addr)) {
                if (x.size() != 2) {
                  ESP_LOGD("lambda", "Received an invalid control message from gateway (size %d)", x.size());
                  return;
                }
                id(g_relay_states)[0] = x[0];
                id(g_relay_states)[1] = x[1];
                ESP_LOGD("lambda", "Got control msg from gw: %s %s", std::bitset<8>(x[0]).to_string().c_str(), std::bitset<8>(x[1]).to_string().c_str());
                // At this point x is a vector of two uint8 items. Need to turn on relays the bit is high and turn off when it is low.
                (x[0] >> 0 & 1) ? id(RL00).turn_on() : id(RL00).turn_off();
                (x[0] >> 1 & 1) ? id(RL01).turn_on() : id(RL01).turn_off();
                (x[0] >> 2 & 1) ? id(RL02).turn_on() : id(RL02).turn_off();
                (x[0] >> 3 & 1) ? id(RL03).turn_on() : id(RL03).turn_off();
                (x[0] >> 4 & 1) ? id(RL04).turn_on() : id(RL04).turn_off();
                (x[0] >> 5 & 1) ? id(RL05).turn_on() : id(RL05).turn_off();
                (x[0] >> 6 & 1) ? id(RL06).turn_on() : id(RL06).turn_off();
                (x[0] >> 7 & 1) ? id(RL07).turn_on() : id(RL07).turn_off();

                (x[1] >> 0 & 1) ? id(RL08).turn_on() : id(RL08).turn_off();
                (x[1] >> 1 & 1) ? id(RL09).turn_on() : id(RL09).turn_off();
                (x[1] >> 2 & 1) ? id(RL10).turn_on() : id(RL10).turn_off();
                (x[1] >> 3 & 1) ? id(RL11).turn_on() : id(RL11).turn_off();
                (x[1] >> 4 & 1) ? id(RL12).turn_on() : id(RL12).turn_off();
                (x[1] >> 5 & 1) ? id(RL13).turn_on() : id(RL13).turn_off();
                (x[1] >> 6 & 1) ? id(RL14).turn_on() : id(RL14).turn_off();
                (x[1] >> 7 & 1) ? id(RL15).turn_on() : id(RL15).turn_off();
              }

interval:
  - interval: 10s
    startup_delay: 1s
    then:
      - lambda: |-
          id(s_send_relay_states).execute();

  - interval: 1s
    # NOTE the first run of this interval must be synced with dip switch gpio debounce
    startup_delay: 1s
    then:
      - lambda: |-
          id(s_read_my_addr).execute();

# TODO GPIO0 ADC voltage
# TODO add slow periodic sender of monitoring messages, including memory state, loop time, adc voltage
