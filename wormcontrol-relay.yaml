substitutions:
  device_name: wormcontrol-relay
  # CAN_TX_PIN: "GPIO1" # cantest
  # CAN_RX_PIN: "GPIO3" # cantest
  CAN_RX_PIN: "GPIO20"
  CAN_TX_PIN: "GPIO21"
  update_interval_debug: 5s

packages:
  # debug:   !include common/pkg-debug.yaml
  base:    !include mod-relay/pkg-base.yaml 

i2c:
  sda: GPIO2
  scl: GPIO8
  frequency: 100kHz 
  scan: true

sn74hc595:
  - id: 'rl_hub'
    data_pin: GPIO6
    clock_pin: GPIO7
    latch_pin: GPIO10
    sr_count: 2

# TODO GPIO0 ADC voltage

sensor:
  - platform: template
    name: "Template Sensor"
    lambda: |-
      ESP_LOGD("lambda", "hello test log");
      return {};
    update_interval: 1s

  - platform: template
    id: "my_can_address"
    update_interval: 1s # interval at which to execute the lambda
    lambda: |-
      int dip1 = id(can_dip1).state;
      int dip2 = id(can_dip2).state;
      int dip3 = id(can_dip3).state;
      int dip4 = id(can_dip4).state;

      // id(my_can_address).publish_state((dip1 << 3) | (dip2 << 2) | (dip3 << 1) | dip4);
      // id(my_can_address).publish_state(555);
      // ESP_LOGD("lambda", "my_can_address: %s", id(my_can_address).state);
      
      if (dip1) {
        id(RL0).turn_on();
        id(RL1).turn_on();
        id(RL2).turn_on();
        id(RL3).turn_on();
      } else {
        id(RL0).turn_off();
        id(RL1).turn_off();
        id(RL2).turn_off();
        id(RL3).turn_off();
      }
      if (dip2) {
        id(RL4).turn_on();
        id(RL5).turn_on();
        id(RL6).turn_on();
        id(RL7).turn_on();
      } else {
        id(RL4).turn_off();
        id(RL5).turn_off();
        id(RL6).turn_off();
        id(RL7).turn_off();
      }
      if (dip3) {
        id(RL8).turn_on();
        id(RL9).turn_on();
        id(RL10).turn_on();
        id(RL11).turn_on();
      } else {
        id(RL8).turn_off();
        id(RL9).turn_off();
        id(RL10).turn_off();
        id(RL11).turn_off();
      }
      if (dip4) {
        id(RL12).turn_on();
        id(RL13).turn_on();
        id(RL14).turn_on();
        id(RL15).turn_on();
      } else {
        id(RL12).turn_off();
        id(RL13).turn_off();
        id(RL14).turn_off();
        id(RL15).turn_off();
      }

      // dip1 ? id(RL0).turn_on() : id(RL0).turn_off();
      // dip2 ? id(RL1).turn_on() : id(RL1).turn_off();
      // dip3 ? id(RL2).turn_on() : id(RL2).turn_off();
      // dip4 ? id(RL3).turn_on() : id(RL3).turn_off();

      return (dip4 << 3) | (dip3 << 2) | (dip2 << 1) | dip1;

switch:
  # relays through expander
  - { platform: gpio, id: "RL0",  pin: { sn74hc595: rl_hub, number: 0 } }
  - { platform: gpio, id: "RL1",  pin: { sn74hc595: rl_hub, number: 1 } }
  - { platform: gpio, id: "RL2",  pin: { sn74hc595: rl_hub, number: 2 } }
  - { platform: gpio, id: "RL3",  pin: { sn74hc595: rl_hub, number: 3 } }
  - { platform: gpio, id: "RL4",  pin: { sn74hc595: rl_hub, number: 4 } }
  - { platform: gpio, id: "RL5",  pin: { sn74hc595: rl_hub, number: 5 } }
  - { platform: gpio, id: "RL6",  pin: { sn74hc595: rl_hub, number: 6 } }
  - { platform: gpio, id: "RL7",  pin: { sn74hc595: rl_hub, number: 7 } }
  - { platform: gpio, id: "RL8",  pin: { sn74hc595: rl_hub, number: 8 } }
  - { platform: gpio, id: "RL9",  pin: { sn74hc595: rl_hub, number: 9 } }
  - { platform: gpio, id: "RL10", pin: { sn74hc595: rl_hub, number: 10 } }
  - { platform: gpio, id: "RL11", pin: { sn74hc595: rl_hub, number: 11 } }
  - { platform: gpio, id: "RL12", pin: { sn74hc595: rl_hub, number: 12 } }
  - { platform: gpio, id: "RL13", pin: { sn74hc595: rl_hub, number: 13 } }
  - { platform: gpio, id: "RL14", pin: { sn74hc595: rl_hub, number: 14 } }
  - { platform: gpio, id: "RL15", pin: { sn74hc595: rl_hub, number: 15 } }

binary_sensor:
  # canbus address dip switches
  - { platform: gpio, id: "can_dip1", pin: { number: GPIO5, inverted: true, mode: { input: true, pullup: true } } }
  - { platform: gpio, id: "can_dip2", pin: { number: GPIO4, inverted: true, mode: { input: true, pullup: true } } }
  - { platform: gpio, id: "can_dip3", pin: { number: GPIO3, inverted: true, mode: { input: true, pullup: true } } }
  - { platform: gpio, id: "can_dip4", pin: { number: GPIO1, inverted: true, mode: { input: true, pullup: true } } }

canbus:
  - platform: esp32_can
    id: espcan
    tx_pin: ${CAN_TX_PIN}
    rx_pin: ${CAN_RX_PIN}
    can_id: 0
    bit_rate: 125kbps
    on_frame:
      # relay control message from gw
      - can_id:      0b10000000000
        can_id_mask: 0b11111110000
        then:
        - lambda: |-
            if ((can_id & 0b00000001111) == ((int)id(my_can_address).state)) {
              x[15] ? id(RL0).turn_on()  : id(RL0).turn_off();
              x[14] ? id(RL1).turn_on()  : id(RL1).turn_off();
              x[13] ? id(RL2).turn_on()  : id(RL2).turn_off();
              x[12] ? id(RL3).turn_on()  : id(RL3).turn_off();
              x[11] ? id(RL4).turn_on()  : id(RL4).turn_off();
              x[10] ? id(RL5).turn_on()  : id(RL5).turn_off();
              x[9]  ? id(RL6).turn_on()  : id(RL6).turn_off();
              x[8]  ? id(RL7).turn_on()  : id(RL7).turn_off();
              x[7]  ? id(RL8).turn_on()  : id(RL8).turn_off();
              x[6]  ? id(RL9).turn_on()  : id(RL9).turn_off();
              x[5]  ? id(RL10).turn_on() : id(RL10).turn_off();
              x[4]  ? id(RL11).turn_on() : id(RL11).turn_off();
              x[3]  ? id(RL12).turn_on() : id(RL12).turn_off();
              x[2]  ? id(RL13).turn_on() : id(RL13).turn_off();
              x[1]  ? id(RL14).turn_on() : id(RL14).turn_off();
              x[0]  ? id(RL15).turn_on() : id(RL15).turn_off();
            }

# TODO add periodic (and on boot) sender of relay states
# TODO add periodic sender of monitoring messages
